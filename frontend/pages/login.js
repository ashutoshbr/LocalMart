import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import axios from 'axios';
import { toast } from 'react-toastify';
import { Input, Notification } from '../components';
import Button from '../components/Button';
import validateEmail from '../utils/validateEmail';
import { useAuthContext } from '../hooks/useAuthContext';
// const validatePassword = (password) => (password.length >= 8);

const Login = () => {
  const router = useRouter();
  const [inputDetail, setInputDetail] = useState({ email: '', password: '' });
  const [validationMessage, setValidationMessage] = useState({ email: '', password: '' });
  // const [data, setData] = useState();
  const { dispatch } = useAuthContext();
  const [error, setError] = useState(null);
  const [loadingCircle, setLoadingCircle] = useState(false);

  const handleLogin = () => {
    setLoadingCircle(true);
    const formData = new FormData();
    formData.append('username', inputDetail.email);
    formData.append('password', inputDetail.password);
    setError(null);
    axios({
      method: 'post',
      url: `${process.env.NEXT_PUBLIC_BACKEND_API}/login`,
      data: formData,
      headers: {
        accept: 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
      },
    })
      .then((response) => {
        if (response.status === 200) {
          // setData(response.data);
          console.log(response.data);
          localStorage.setItem('user', JSON.stringify(response.data));
          dispatch({ type: 'LOGIN', payload: response.data });
          setInputDetail({ email: '', password: '' });
          setLoadingCircle(false);
          router.push('/', undefined, { shallow: true });
        }
      })
      .catch((err) => {
        setLoadingCircle(false);
        if (err.response?.status === 403) {
          setError(err.response.data.detail);
        }
        console.log(err); console.log(err.response);
      });
  };

  const handleValidation = (attribute, value) => {
    if (attribute === 'email') {
      if (validateEmail(value)) {
        setValidationMessage({ ...validationMessage, email: '' });
      } else {
        setValidationMessage({ ...validationMessage, email: 'Enter a valid email' });
      }
    }
  };

  useEffect(() => {
    const user = JSON.parse(localStorage.getItem('user'));
    if (user) {
      const notify = () => toast('Found previous session, Logging you in');
      notify();
      setTimeout(() => {
        router.push('/', undefined, { shallow: true });
      }, 3000);
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col justify-end sm:px-4 p-12 pt-16">
        <div className="mt-8 flexBetween sm:flex-col sm:items-start">
          <div className="w-full">
            <p className="text-subtitle-blue italic font-semibold text-base md:mb-4 sm:mb-1 ml-4 xs:ml-0">- Login</p>
            <h1 className="font-montserrat dark:text-white text-mart-black-1 text-3xl minlg:text-4xl xs:text-xl font-bold ml-4 xs:ml-0">Login to Your Account</h1>
            <div className="m-auto w-2/5 md:w-3/5 sm:w-4/5 xs:w-full">
              <Input value={inputDetail.email} inputType="input" title="Email Address" placeholder="Enter your email" handleClick={(e) => { setInputDetail({ ...inputDetail, email: e.target.value }); handleValidation('email', e.target.value); }} />
              {validationMessage.email !== '' && <p className="absolute text-red-500">{validationMessage.email}</p>}
              <Input value={inputDetail.password} inputType="password" hidePassword title="Password" placeholder="Enter your password" handleClick={(e) => { setInputDetail({ ...inputDetail, password: e.target.value }); handleValidation('password', e.target.value); }} />
              {/* {validationMessage.password !== '' && <p className="absolute text-red-500">{validationMessage.password}</p>} */}
              <div className="mt-12 w-full flex justify-between">
                {loadingCircle
                  ? <Button btnName="Processing" handleClick={handleLogin} classStyles="rounded-md w-2/5 py-3 xs:py-2" />
                  : <Button btnName="Login" handleClick={handleLogin} classStyles="rounded-md w-2/5 py-3 xs:py-2" />}

                <Button btnName="Create account" classStyles="rounded-md w-2/5 py-3 border opacity-40 hover:opacity-100 bg-gray-400 xs:py-2" handleClick={() => router.push('/signup', undefined, { shallow: true })} />
              </div>
              <div className="flex justify-center items-center mt-8">
                { error !== null && <p className="absolute text-red-500">{error}</p>}
              </div>
              <div className="mt-8 flex w-full justify-center">
                <span className="text-mart-gray-2 underline cursor-pointer">
                  Forget Password?
                  <Notification />
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Login;
